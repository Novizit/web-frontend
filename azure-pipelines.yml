# Azure DevOps Pipeline for Frontend Deployment
# This pipeline automatically builds and deploys the Next.js frontend to Azure App Service

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - frontend/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Azure Configuration
  resourceGroupName: 'real-estate-platform-rg'
  webAppName: 'real-estate-frontend'
  planName: 'real-estate-frontend-plan'
  location: 'East US'
  
  # Build Configuration
  nodeVersion: '18.17.0'
  npmVersion: '9.6.7'

stages:
- stage: Build
  displayName: 'Build Frontend'
  jobs:
  - job: Build
    displayName: 'Build Next.js Application'
    steps:
    - task: NodeTool@0
      displayName: 'Use Node.js $(nodeVersion)'
      inputs:
        versionSpec: '$(nodeVersion)'
        checkLatest: true

    - task: Npm@1
      displayName: 'npm install'
      inputs:
        command: 'install'
        workingDir: 'frontend'

    - task: Npm@1
      displayName: 'npm run build'
      inputs:
        command: 'custom'
        customCommand: 'run build'
        workingDir: 'frontend'

    - task: ArchiveFiles@2
      displayName: 'Archive build artifacts'
      inputs:
        rootFolderOrFile: 'frontend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
        excludeFiles: |
          **/node_modules/**
          **/.git/**
          **/*.log
          **/coverage/**
          **/.env*
          **/.next/**
          **/deployment.zip

    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to Azure App Service'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure App Service'
            inputs:
              azureSubscription: 'Azure Subscription'
              appName: '$(webAppName)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              appType: 'webApp'
              resourceGroupName: '$(resourceGroupName)'
              deploymentMethod: 'auto'

          - task: AzureCLI@2
            displayName: 'Configure environment variables'
            inputs:
              azureSubscription: 'Azure Subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Configure environment variables
                az webapp config appsettings set \
                  --resource-group $(resourceGroupName) \
                  --name $(webAppName) \
                  --settings \
                    NODE_ENV="production" \
                    NEXT_TELEMETRY_DISABLED="1" \
                    WEBSITE_NODE_DEFAULT_VERSION="$(nodeVersion)" \
                    WEBSITE_RUN_FROM_PACKAGE="1" \
                  --output none
                
                # Get backend URL and set API URL
                BACKEND_URL=$(az webapp show \
                  --resource-group $(resourceGroupName) \
                  --name "real-estate-backend" \
                  --query "defaultHostName" \
                  --output tsv 2>/dev/null || echo "real-estate-backend.azurewebsites.net")
                
                az webapp config appsettings set \
                  --resource-group $(resourceGroupName) \
                  --name $(webAppName) \
                  --settings \
                    NEXT_PUBLIC_API_URL="https://$BACKEND_URL/api" \
                  --output none

          - task: AzureCLI@2
            displayName: 'Health check'
            inputs:
              azureSubscription: 'Azure Subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Wait for deployment to complete
                sleep 30
                
                # Get app URL
                APP_URL=$(az webapp show \
                  --resource-group $(resourceGroupName) \
                  --name $(webAppName) \
                  --query "defaultHostName" \
                  --output tsv)
                
                # Perform health check
                if curl -f "https://$APP_URL" > /dev/null 2>&1; then
                  echo "✅ Health check passed!"
                else
                  echo "⚠️  Health check failed. The app might still be starting up."
                  exit 1
                fi

# Staging deployment for develop branch
- stage: DeployStaging
  displayName: 'Deploy to Staging'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployStaging
    displayName: 'Deploy to Staging Environment'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy to Staging App Service'
            inputs:
              azureSubscription: 'Azure Subscription'
              appName: '$(webAppName)-staging'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              appType: 'webApp'
              resourceGroupName: '$(resourceGroupName)'
              deploymentMethod: 'auto'

          - task: AzureCLI@2
            displayName: 'Configure staging environment variables'
            inputs:
              azureSubscription: 'Azure Subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Configure environment variables for staging
                az webapp config appsettings set \
                  --resource-group $(resourceGroupName) \
                  --name $(webAppName)-staging \
                  --settings \
                    NODE_ENV="staging" \
                    NEXT_TELEMETRY_DISABLED="1" \
                    WEBSITE_NODE_DEFAULT_VERSION="$(nodeVersion)" \
                    WEBSITE_RUN_FROM_PACKAGE="1" \
                  --output none
                
                # Get backend URL and set API URL for staging
                BACKEND_URL=$(az webapp show \
                  --resource-group $(resourceGroupName) \
                  --name "real-estate-backend-staging" \
                  --query "defaultHostName" \
                  --output tsv 2>/dev/null || echo "real-estate-backend.azurewebsites.net")
                
                az webapp config appsettings set \
                  --resource-group $(resourceGroupName) \
                  --name $(webAppName)-staging \
                  --settings \
                    NEXT_PUBLIC_API_URL="https://$BACKEND_URL/api" \
                  --output none 