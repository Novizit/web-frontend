trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  nodeVersion: '18.x'
  resourceGroupName: 'novizit-rg'
  appServiceName: 'novizit-frontend-web-g6dncbcjczeudgft'
  location: 'Central India'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - script: |
        npm ci
      displayName: 'Install dependencies'

    - script: |
        npm run build
      displayName: 'Build application'

    - script: |
        npm run lint
      displayName: 'Run linting'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
        excludeFiles: |
          **/node_modules/**
          **/.git/**
          **/*.log
          **/coverage/**
          **/.env*
          **/test/**
          **/*.test.*
          **/*.spec.*
        displayName: 'Create deployment package'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish artifacts'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to Azure App Service'
    environment: production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Your-Azure-Subscription'
              appName: $(appServiceName)
              resourceGroupName: $(resourceGroupName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              appType: 'webAppLinux'
              runtimeStack: 'NODE|18-lts'
              startUpCommand: 'chmod +x startup.sh && ./startup.sh'
              
          - script: |
              az webapp config set \
                --resource-group $(resourceGroupName) \
                --name $(appServiceName) \
                --always-on true
            displayName: 'Configure Always On'
            
          - script: |
              az webapp config set \
                --resource-group $(resourceGroupName) \
                --name $(appServiceName) \
                --generic-configurations '{"idleTimeoutInMinutes": 0}'
            displayName: 'Configure Idle Timeout' 